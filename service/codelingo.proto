// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package service;

// The query service definition.
service CodeLingo {
    rpc FileFromNode(Node) returns (File) {}

    // Lists available lexicons
    rpc ListLexicons (ListLexiconsRequest) returns (ListLexiconsReply) {}

    rpc ListFacts (ListFactsRequest) returns (FactList) {}

    rpc QueryFromOffset (QueryFromOffsetRequest) returns (QueryFromOffsetReply) {}

    rpc DescribeFact (DescribeFactRequest) returns (DescribeFactReply) {}

    // Return the latest client version for this platform
    rpc LatestClientVersion (LatestClientVersionRequest) returns (LatestClientVersionReply) {}
}

message Node {
    string uid = 1;
}

message File {
    string filename = 1;
}

message DescribeFactRequest {
    string owner = 1;
    string name = 2;
    string version = 3;
    string fact = 4;
}

message DescribeFactReply {
    string description = 1;
    string examples = 2;
    repeated Property properties = 3;
}

message Property {
    string name = 1;
    string description = 2;
}

message QueryFromOffsetRequest {
    string lang = 1;
    string dir = 2;
    string filename = 3;
    string src = 4;
    int64 start = 5;
    int64 end = 6;
}

message QueryFromOffsetReply {
    repeated GenFact facts = 1;
}

message GenFact {
    string factName = 1;
    map<string, GenProperty> properties = 2;
    repeated GenFact children = 3;
}

message GenProperty {
    oneof value {
        string string = 1;
        int64 int = 2;
        float float = 3;
        bool bool = 4;
    }
}

message ListFactsRequest {
    string owner = 1;
    string name = 2;
    string version = 3;
}

message FactList {
    map<string, Children> facts = 1;
}

message Children {
    repeated string child = 1;
}

message ListLexiconsRequest {}

message ListLexiconsReply {
    repeated string lexicons = 1;
}

message LatestClientVersionRequest {}

message LatestClientVersionReply {
    string version  = 1;  // Version string, ie. 1.0.4
}
